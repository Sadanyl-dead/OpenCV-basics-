import cv2 as cv
import numpy as np 

# Загрузка изображения
img = cv.imread('temp_images/500.jpg')
cv.imshow('Stock', img)

# Преобразование изображения в оттенки серого
gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
cv.imshow('Gray', gray)

# Лапласиан
lap = cv.Laplacian(gray, cv.CV_64F)
lap = np.uint8(np.absolute(lap))
cv.imshow('Laplacing', lap)

# Оператор Собеля по горизонтальному направлению (выделение вертикальных границ)
sobelx = cv.Sobel(gray, cv.CV_64F, 1, 0)
# Оператор Собеля по вертикальному направлению (выделение горизонтальных границ)
sobely = cv.Sobel(gray, cv.CV_64F, 0, 1)

# Объединение результатов операторов Собеля с помощью побитового И (возможно, ошибка здесь, см. ниже)
combine_sobel = cv.bitwise_and(sobelx, sobely)

# Canny edge detection для сравнения с результатами операторов Собеля
canny = cv.Canny(gray, 100, 255)
cv.imshow('Canny', canny)

# Отображение результатов операторов Собеля и их комбинации
cv.imshow('Sobel X ', sobelx)
cv.imshow('Sobel y', sobely)
cv.imshow('Combine Sobel', combine_sobel)

# Ожидание нажатия клавиши для закрытия окон
cv.waitKey(0)
# cv.Laplacian(gray, cv.CV_64F): 
# Выполняет операцию Лапласиана на изображении в оттенках серого (gray). cv.CV_64F указывает на тип данных для хранения результатов.

# cv.Sobel(gray, cv.CV_64F, 1, 0): 
# Применяет оператор Собеля к изображению в оттенках серого (gray) в горизонтальном направлении (выделение вертикальных границ).

# cv.Sobel(gray, cv.CV_64F, 0, 1): 
# Применяет оператор Собеля к изображению в оттенках серого (gray) в вертикальном направлении (выделение горизонтальных границ).

# cv.bitwise_and(sobelx, sobely): 
# Побитово умножает результаты операторов Собеля (sobelx и sobely). Однако это может привести к непредсказуемым результатам, так как операторы Собеля обычно используются отдельно для выделения границ по горизонтали и вертикали, а их комбинация может быть неинформативной.

# cv.Canny(gray, 100, 255): 
# Выполняет детектирование границ методом Canny на изображении в оттенках серого (gray) с порогами 100 и 255.